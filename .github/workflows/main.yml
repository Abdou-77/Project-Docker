# Workflow CI : build et tests automatiques du backend et d√©ploiement des images Docker

name: CI devops 2025

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better SonarCloud analysis

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        run: mvn -B -f backend/pom.xml clean verify

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: backend
        run: |
          echo "üîç Running SonarCloud analysis..."
          mvn -B sonar:sonar \
            -Dsonar.projectKey=ansible-course_ansible-course \
            -Dsonar.organization=ansible-course \
            -Dsonar.host.url=https://sonarcloud.io

  build-and-push-docker-image:
    needs: test-backend
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare Docker username
        run: |
          echo "Preparing Docker username"
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV
            echo "Using DOCKERHUB_USERNAME secret"
          elif [ -n "${{ secrets.SECRET_EMAIL }}" ]; then
            if echo "${{ secrets.SECRET_EMAIL }}" | grep -q '@'; then
              echo "ERROR: SECRET_EMAIL contains '@' ‚Äî please set DOCKERHUB_USERNAME instead."
              exit 1
            else
              echo "DOCKER_USERNAME=${{ secrets.SECRET_EMAIL }}" >> $GITHUB_ENV
              echo "Using SECRET_EMAIL as Docker username"
            fi
          else
            echo "ERROR: Set repository secret DOCKERHUB_USERNAME"
            exit 1
          fi

      - name: Validate Docker credentials
        run: |
          echo "Validating Docker credentials"
          if [ -z "${{ secrets.SECRET_EMAIL }}" ] && [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "ERROR: Repository secret SECRET_EMAIL or DOCKERHUB_USERNAME is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SECRET_TOKEN }}" ] && [ -z "${{ secrets.SECRET_PASSWORD }}" ]; then
            echo "ERROR: Neither SECRET_TOKEN nor SECRET_PASSWORD is set"
            exit 1
          fi
          echo "Docker credentials validated"

      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME || secrets.SECRET_EMAIL }}
          password: ${{ secrets.SECRET_TOKEN || secrets.SECRET_PASSWORD }}

      - name: Build image and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/tp-devops-simple-api-backend:latest

      - name: Build image and push database
        uses: docker/build-push-action@v6
        with:
          context: ./initdb
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/tp-devops-simple-api-database:latest

      - name: Build image and push httpd
        uses: docker/build-push-action@v6
        with:
          context: ./httpd
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/tp-devops-simple-api-httpd:latest

  # üöÄ Nouveau job : D√©ploiement continu sur le serveur cloud
  deploy-to-production:
    needs: build-and-push-docker-image
    runs-on: ubuntu-24.04
    # D√©ployer uniquement sur la branche main (pas sur les PRs ni develop)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Ajouter l'h√¥te aux known_hosts
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Deploy with Ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
        run: |
          cd ansible
          ansible-playbook -i inventories/setup.yml playbook.yml \
            -e "ansible_user=${{ secrets.SERVER_USER }}"

      - name: Verify deployment
        run: |
          echo "üîç Verification du d√©ploiement..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            'docker ps --format "table {{.Names}}\t{{.Status}}"'

      - name: Test endpoint availability
        run: |
          echo "üè• Test de disponibilit√© du serveur..."
          sleep 30  # Attendre que les services d√©marrent
          # Tester que le proxy r√©pond sur le port 80
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 http://${{ secrets.SERVER_HOST }} || echo "000")
          if [ "$HTTP_CODE" != "000" ]; then
            echo "‚úÖ Application d√©ploy√©e - HTTP $HTTP_CODE"
          else
            echo "‚ö†Ô∏è Le serveur ne r√©pond pas encore (peut prendre plus de temps)"
          fi

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/id_rsa
