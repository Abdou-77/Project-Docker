# Workflow CI : build et tests automatiques du backend et déploiement des images Docker

name: CI devops 2025

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better SonarCloud analysis

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        run: mvn -B -f backend/pom.xml clean verify

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: backend
        run: |
          if [ -z "$SONAR_TOKEN" ]; then
            echo "⚠️  Skipping SonarCloud analysis: SONAR_TOKEN not set"
            echo "   Add it in Settings > Secrets and variables > Actions"
          else
            echo "🔍 Running SonarCloud analysis..."
            mvn -B sonar:sonar \
              -Dsonar.projectKey=ansible-course_ansible-course \
              -Dsonar.organization=ansible-course \
              -Dsonar.host.url=https://sonarcloud.io
          fi

  build-and-push-docker-image:
    needs: test-backend
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare Docker username
        run: |
          echo "Preparing Docker username"
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV
            echo "Using DOCKERHUB_USERNAME secret"
          elif [ -n "${{ secrets.SECRET_EMAIL }}" ]; then
            if echo "${{ secrets.SECRET_EMAIL }}" | grep -q '@'; then
              echo "ERROR: SECRET_EMAIL contains '@' — please set DOCKERHUB_USERNAME instead."
              exit 1
            else
              echo "DOCKER_USERNAME=${{ secrets.SECRET_EMAIL }}" >> $GITHUB_ENV
              echo "Using SECRET_EMAIL as Docker username"
            fi
          else
            echo "ERROR: Set repository secret DOCKERHUB_USERNAME"
            exit 1
          fi

      - name: Validate Docker credentials
        run: |
          echo "Validating Docker credentials"
          if [ -z "${{ secrets.SECRET_EMAIL }}" ] && [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "ERROR: Repository secret SECRET_EMAIL or DOCKERHUB_USERNAME is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SECRET_TOKEN }}" ] && [ -z "${{ secrets.SECRET_PASSWORD }}" ]; then
            echo "ERROR: Neither SECRET_TOKEN nor SECRET_PASSWORD is set"
            exit 1
          fi
          echo "Docker credentials validated"

      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME || secrets.SECRET_EMAIL }}
          password: ${{ secrets.SECRET_TOKEN || secrets.SECRET_PASSWORD }}

      - name: Build image and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/tp-devops-simple-api-backend:latest

      - name: Build image and push database
        uses: docker/build-push-action@v6
        with:
          context: ./initdb
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/tp-devops-simple-api-database:latest

      - name: Build image and push httpd
        uses: docker/build-push-action@v6
        with:
          context: ./httpd
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/tp-devops-simple-api-httpd:latest
